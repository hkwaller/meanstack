angular.module("app",["app.controllers","app.services","ngRoute"]).config(["$routeProvider",function(t){t.when("/",{controller:"MainCtrl",templateUrl:"partials/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"partials/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"partials/login.html"}).otherwise("/")}]),angular.module("app.controllers",[]).controller("ApplicationCtrl",["$scope","UserService",function(t,e){t.$on("login",function(e,o){t.currentUser=o}),t.logout=function(){e.logout()},e.token&&console.log("nope")}]).controller("MainCtrl",["$scope","$http","PostService",function(t,e,o){t.posts=[],o.fetch().success(function(e){t.posts=e}).error(function(t){console.log(t)}),t.addPost=function(e){e&&o.post({username:"hkwaller",text:e.text}).success(function(e){t.posts.unshift(e),t.post=null}).error(function(t){console.log(t)})}}]).controller("RegisterCtrl",["$scope","$location","UserService",function(t,e,o){t.register=function(e){o.register(e).then(function(e){e&&t.$emit("login",e.data)})}}]).controller("LoginCtrl",["$scope","UserService",function(t,e){t.login=function(o){e.login(o).then(function(e){t.$emit("login",e.data)})}}]),angular.module("app.services",[]).service("PostService",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.post=function(e){return t.post("/api/posts",e)}}]).service("UserService",["$http",function(t){var e=this;this.getUser=function(){return t.get("/api/user",{headers:{"X-Auth":e.token}})},this.login=function(o){return t.post("api/sessions",{username:o.username,password:o.password}).then(function(o){return e.token=o.data,window.localStorage.token=o.data,t.defaults.headers.common["X-Auth"]=o.data,e.getUser()})},this.register=function(e){return t.post("api/user",e).then(function(t){this.login(t)})},this.logout=function(){delete e.token}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzLmpzIiwic2VydmljZXMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsImNvbnRyb2xsZXIiLCJ0ZW1wbGF0ZVVybCIsIm90aGVyd2lzZSIsIiRzY29wZSIsIlVzZXJTZXJ2aWNlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsImxvZ291dCIsInRva2VuIiwiY29uc29sZSIsImxvZyIsIiRodHRwIiwiUG9zdFNlcnZpY2UiLCJwb3N0cyIsImZldGNoIiwic3VjY2VzcyIsImVycm9yIiwiZXJyIiwiYWRkUG9zdCIsInBvc3QiLCJ1c2VybmFtZSIsInRleHQiLCJ1bnNoaWZ0IiwiJGxvY2F0aW9uIiwicmVnaXN0ZXIiLCJ0aGVuIiwicmVzcG9uc2UiLCIkZW1pdCIsImRhdGEiLCJsb2dpbiIsInNlcnZpY2UiLCJ0aGlzIiwiZ2V0IiwiZ2V0VXNlciIsImhlYWRlcnMiLCJYLUF1dGgiLCJwYXNzd29yZCIsInZhbCIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImRlZmF1bHRzIiwiY29tbW9uIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUFBLGtCQUFBLGVBQUEsWUFFQUMsUUFBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLEtBQ0FDLFdBQUEsV0FDQUMsWUFBQSx3QkFFQUYsS0FBQSxhQUNBQyxXQUFBLGVBQ0FDLFlBQUEsMkJBR0FGLEtBQUEsVUFDQUMsV0FBQSxZQUNBQyxZQUFBLHdCQUdBQyxVQUFBLFFDbEJBUCxRQUFBQyxPQUFBLHNCQUVBSSxXQUFBLG1CQUFBLFNBQUEsY0FBQSxTQUFBRyxFQUFBQyxHQUNBRCxFQUFBRSxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUosRUFBQUssWUFBQUQsSUFHQUosRUFBQU0sT0FBQSxXQUNBTCxFQUFBSyxVQUdBTCxFQUFBTSxPQUNBQyxRQUFBQyxJQUFBLFdBSUFaLFdBQUEsWUFBQSxTQUFBLFFBQUEsY0FBQSxTQUFBRyxFQUFBVSxFQUFBQyxHQUNBWCxFQUFBWSxTQUVBRCxFQUFBRSxRQUFBQyxRQUFBLFNBQUFGLEdBQ0FaLEVBQUFZLE1BQUFBLElBQ0FHLE1BQUEsU0FBQUMsR0FDQVIsUUFBQUMsSUFBQU8sS0FJQWhCLEVBQUFpQixRQUFBLFNBQUFDLEdBQ0FBLEdBQ0FQLEVBQUFPLE1BQ0FDLFNBQUEsV0FDQUMsS0FBQUYsRUFBQUUsT0FDQU4sUUFBQSxTQUFBSSxHQUNBbEIsRUFBQVksTUFBQVMsUUFBQUgsR0FDQWxCLEVBQUFrQixLQUFBLE9BQ0FILE1BQUEsU0FBQUMsR0FDQVIsUUFBQUMsSUFBQU8sU0FNQW5CLFdBQUEsZ0JBQUEsU0FBQSxZQUFBLGNBQUEsU0FBQUcsRUFBQXNCLEVBQUFyQixHQUNBRCxFQUFBdUIsU0FBQSxTQUFBbkIsR0FDQUgsRUFBQXNCLFNBQUFuQixHQUFBb0IsS0FBQSxTQUFBQyxHQUNBQSxHQUNBekIsRUFBQTBCLE1BQUEsUUFBQUQsRUFBQUUsWUFPQTlCLFdBQUEsYUFBQSxTQUFBLGNBQUEsU0FBQUcsRUFBQUMsR0FDQUQsRUFBQTRCLE1BQUEsU0FBQXhCLEdBQ0FILEVBQUEyQixNQUFBeEIsR0FBQW9CLEtBQUEsU0FBQUMsR0FDQXpCLEVBQUEwQixNQUFBLFFBQUFELEVBQUFFLFlDdkRBbkMsUUFBQUMsT0FBQSxtQkFFQW9DLFFBQUEsZUFBQSxRQUFBLFNBQUFuQixHQUNBb0IsS0FBQWpCLE1BQUEsV0FDQSxNQUFBSCxHQUFBcUIsSUFBQSxlQUdBRCxLQUFBWixLQUFBLFNBQUFBLEdBQ0EsTUFBQVIsR0FBQVEsS0FBQSxhQUFBQSxPQUlBVyxRQUFBLGVBQUEsUUFBQSxTQUFBbkIsR0FDQSxHQUFBbUIsR0FBQUMsSUFFQUEsTUFBQUUsUUFBQSxXQUNBLE1BQUF0QixHQUFBcUIsSUFBQSxhQUNBRSxTQUFBQyxTQUFBTCxFQUFBdEIsVUFJQXVCLEtBQUFGLE1BQUEsU0FBQXhCLEdBQ0EsTUFBQU0sR0FBQVEsS0FBQSxnQkFDQUMsU0FBQWYsRUFBQWUsU0FBQWdCLFNBQUEvQixFQUFBK0IsV0FDQVgsS0FBQSxTQUFBWSxHQUlBLE1BSEFQLEdBQUF0QixNQUFBNkIsRUFBQVQsS0FDQVUsT0FBQUMsYUFBQS9CLE1BQUE2QixFQUFBVCxLQUNBakIsRUFBQTZCLFNBQUFOLFFBQUFPLE9BQUEsVUFBQUosRUFBQVQsS0FDQUUsRUFBQUcsYUFJQUYsS0FBQVAsU0FBQSxTQUFBbkIsR0FDQSxNQUFBTSxHQUFBUSxLQUFBLFdBQUFkLEdBQUFvQixLQUFBLFNBQUFZLEdBQ0FOLEtBQUFGLE1BQUFRLE1BSUFOLEtBQUF4QixPQUFBLGlCQUNBdUIsR0FBQXRCIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ2FwcC5jb250cm9sbGVycycsICdhcHAuc2VydmljZXMnLCAnbmdSb3V0ZSddKVxuXG4uY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgJHJvdXRlUHJvdmlkZXJcbiAgICAud2hlbignLycsIHtcbiAgICAgICAgY29udHJvbGxlcjogJ01haW5DdHJsJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9wb3N0cy5odG1sJ1xuICAgIH0pXG4gICAgLndoZW4oJy9yZWdpc3RlcicsIHtcbiAgICAgICAgY29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXG4gICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvcmVnaXN0ZXIuaHRtbCdcbiAgICB9KVxuICAgIFxuICAgIC53aGVuKCcvbG9naW4nLCB7XG4gICAgICAgIGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2xvZ2luLmh0bWwnXG4gICAgfSlcbiAgICBcbiAgICAub3RoZXJ3aXNlKCcvJylcbn0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcC5jb250cm9sbGVycycsIFtdKVxuXG4uY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU2VydmljZSkge1xuICAgICRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24oXywgdXNlcikge1xuICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXG4gICAgfSlcbiAgICBcbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFVzZXJTZXJ2aWNlLmxvZ291dCgpXG4gICAgfVxuICAgIFxuICAgIGlmIChVc2VyU2VydmljZS50b2tlbikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIm5vcGVcIilcbiAgICB9XG59KVxuXG4uY29udHJvbGxlcignTWFpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCBQb3N0U2VydmljZSkge1xuICAgICRzY29wZS5wb3N0cyA9IFtdXG4gICAgXG4gICAgUG9zdFNlcnZpY2UuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0cykge1xuICAgICAgICAkc2NvcGUucG9zdHMgPSBwb3N0cztcbiAgICB9KS5lcnJvcihmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgIH0pXG4gICAgXG4gICAgXG4gICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbihwb3N0KSB7XG4gICAgICAgIGlmIChwb3N0KSB7XG4gICAgICAgICAgICBQb3N0U2VydmljZS5wb3N0KHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogJ2hrd2FsbGVyJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiBwb3N0LnRleHRcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KVxuICAgICAgICAgICAgICAgICRzY29wZS5wb3N0ID0gbnVsbFxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbn0pXG5cbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRsb2NhdGlvbiwgVXNlclNlcnZpY2UpIHtcbiAgICAkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgIFVzZXJTZXJ2aWNlLnJlZ2lzdGVyKHVzZXIpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbn0pXG5cblxuLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgVXNlclNlcnZpY2UpIHtcbiAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgIFVzZXJTZXJ2aWNlLmxvZ2luKHVzZXIpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKVxuICAgICAgICB9KVxuICAgIH1cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwLnNlcnZpY2VzJywgW10pXG5cbi5zZXJ2aWNlKCdQb3N0U2VydmljZScsIGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJylcbiAgICB9XG4gICAgXG4gICAgdGhpcy5wb3N0ID0gZnVuY3Rpb24ocG9zdCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpXG4gICAgfVxufSlcblxuLnNlcnZpY2UoJ1VzZXJTZXJ2aWNlJywgZnVuY3Rpb24oJGh0dHApIHtcbiAgICB2YXIgc2VydmljZSA9IHRoaXM7XG4gICAgXG4gICAgdGhpcy5nZXRVc2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcicsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ1gtQXV0aCc6IHNlcnZpY2UudG9rZW4gfVxuICAgICAgICB9KVxuICAgIH1cbiAgICAgICAgXG4gICAgdGhpcy5sb2dpbiA9IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJ2FwaS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLCBwYXNzd29yZDogdXNlci5wYXNzd29yZFxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgc2VydmljZS50b2tlbiA9IHZhbC5kYXRhXG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuID0gdmFsLmRhdGFcbiAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHZhbC5kYXRhXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZS5nZXRVc2VyKClcbiAgICAgICAgfSlcbiAgICB9XG4gICAgXG4gICAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJ2FwaS91c2VyJywgdXNlcikudGhlbihmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIHRoaXMubG9naW4odmFsKVxuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICB0aGlzLmxvZ291dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBkZWxldGUgc2VydmljZS50b2tlblxuICAgIH1cblxufSlcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==